const React = require('react');
const ms = require('ms');
const {
  Box,
  Text
} = require('ink');
const importJSX = require('@isaacs/import-jsx');
const Test = importJSX('./test.js');
const chalk = require('chalk');
const Reset = importJSX('../../reset.js');
const s = n => new Array(n + 1).join(' ');
const bannerWords = '  ðŸŒˆ SUMMARY RESULTS ðŸŒˆ  ';
const banner = '\n' + chalk.bgHex('#fff')(s(bannerWords.length)) + '\n' + chalk.bgHex('#fff')(chalk.hex('#333')(chalk.bold(bannerWords))) + '\n' + chalk.bgHex('#fff')(s(bannerWords.length));
module.exports = ({
  results,
  tests
}) => /*#__PURE__*/React.createElement(Reset, null, /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column"
}, /*#__PURE__*/React.createElement(Text, null, banner), /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column"
}, tests.filter(t => t.results && !t.results.ok || t.options.skip || t.options.todo || t.counts.total !== t.counts.pass).sort((a, b) => a.name.localeCompare(b.name, 'en')).map((test, i) => /*#__PURE__*/React.createElement(Test, {
  test: test,
  key: '' + i
})))));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJtcyIsIkJveCIsIlRleHQiLCJpbXBvcnRKU1giLCJUZXN0IiwiY2hhbGsiLCJSZXNldCIsInMiLCJuIiwiQXJyYXkiLCJqb2luIiwiYmFubmVyV29yZHMiLCJiYW5uZXIiLCJiZ0hleCIsImxlbmd0aCIsImhleCIsImJvbGQiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVzdWx0cyIsInRlc3RzIiwiZmlsdGVyIiwidCIsIm9rIiwib3B0aW9ucyIsInNraXAiLCJ0b2RvIiwiY291bnRzIiwidG90YWwiLCJwYXNzIiwic29ydCIsImEiLCJiIiwibmFtZSIsImxvY2FsZUNvbXBhcmUiLCJtYXAiLCJ0ZXN0IiwiaSJdLCJzb3VyY2VzIjpbInN1bW1hcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5jb25zdCBtcyA9IHJlcXVpcmUoJ21zJylcbmNvbnN0IHtCb3gsIFRleHR9ID0gcmVxdWlyZSgnaW5rJylcbmNvbnN0IGltcG9ydEpTWCA9IHJlcXVpcmUoJ0Bpc2FhY3MvaW1wb3J0LWpzeCcpXG5jb25zdCBUZXN0ID0gaW1wb3J0SlNYKCcuL3Rlc3QuanMnKVxuY29uc3QgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpXG5jb25zdCBSZXNldCA9IGltcG9ydEpTWCgnLi4vLi4vcmVzZXQuanMnKVxuXG5jb25zdCBzID0gbiA9PiBuZXcgQXJyYXkobiArIDEpLmpvaW4oJyAnKVxuXG5jb25zdCBiYW5uZXJXb3JkcyA9ICcgIPCfjIggU1VNTUFSWSBSRVNVTFRTIPCfjIggICdcbmNvbnN0IGJhbm5lciA9ICdcXG4nICtcbiAgY2hhbGsuYmdIZXgoJyNmZmYnKShzKGJhbm5lcldvcmRzLmxlbmd0aCkpICtcbiAgJ1xcbicgK1xuICBjaGFsay5iZ0hleCgnI2ZmZicpKGNoYWxrLmhleCgnIzMzMycpKGNoYWxrLmJvbGQoYmFubmVyV29yZHMpKSkgK1xuICAnXFxuJyArXG4gIGNoYWxrLmJnSGV4KCcjZmZmJykocyhiYW5uZXJXb3Jkcy5sZW5ndGgpKVxuXG5tb2R1bGUuZXhwb3J0cyA9ICh7IHJlc3VsdHMsIHRlc3RzIH0pID0+ICg8UmVzZXQ+PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCI+XG4gIDxUZXh0PntiYW5uZXJ9PC9UZXh0PlxuICA8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIj5cbiAgICB7XG4gICAgICB0ZXN0c1xuICAgICAgICAuZmlsdGVyKHQgPT4gdC5yZXN1bHRzICYmICF0LnJlc3VsdHMub2sgfHxcbiAgICAgICAgICAgIHQub3B0aW9ucy5za2lwIHx8IHQub3B0aW9ucy50b2RvIHx8XG4gICAgICAgICAgICB0LmNvdW50cy50b3RhbCAhPT0gdC5jb3VudHMucGFzcylcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSwgJ2VuJykpXG4gICAgICAgIC5tYXAoKHRlc3QsIGkpID0+ICg8VGVzdCB0ZXN0PXt0ZXN0fSBrZXk9eycnK2l9IC8+KSlcbiAgICB9XG4gIDwvQm94PlxuPC9Cb3g+PC9SZXNldD4pXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDeEIsTUFBTTtFQUFDRSxHQUFHO0VBQUVDO0FBQUksQ0FBQyxHQUFHSCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ2xDLE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQy9DLE1BQU1LLElBQUksR0FBR0QsU0FBUyxDQUFDLFdBQVcsQ0FBQztBQUNuQyxNQUFNRSxLQUFLLEdBQUdOLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTU8sS0FBSyxHQUFHSCxTQUFTLENBQUMsZ0JBQWdCLENBQUM7QUFFekMsTUFBTUksQ0FBQyxHQUFHQyxDQUFDLElBQUksSUFBSUMsS0FBSyxDQUFDRCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUNFLElBQUksQ0FBQyxHQUFHLENBQUM7QUFFekMsTUFBTUMsV0FBVyxHQUFHLDJCQUEyQjtBQUMvQyxNQUFNQyxNQUFNLEdBQUcsSUFBSSxHQUNqQlAsS0FBSyxDQUFDUSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUNOLENBQUMsQ0FBQ0ksV0FBVyxDQUFDRyxNQUFNLENBQUMsQ0FBQyxHQUMxQyxJQUFJLEdBQ0pULEtBQUssQ0FBQ1EsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDUixLQUFLLENBQUNVLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQ1YsS0FBSyxDQUFDVyxJQUFJLENBQUNMLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FDL0QsSUFBSSxHQUNKTixLQUFLLENBQUNRLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQ04sQ0FBQyxDQUFDSSxXQUFXLENBQUNHLE1BQU0sQ0FBQyxDQUFDO0FBRTVDRyxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDO0VBQUVDLE9BQU87RUFBRUM7QUFBTSxDQUFDLGtCQUFNLG9CQUFDLEtBQUsscUJBQUMsb0JBQUMsR0FBRztFQUFDLGFBQWEsRUFBQztBQUFRLGdCQUMxRSxvQkFBQyxJQUFJLFFBQUVSLE1BQU0sQ0FBUSxlQUNyQixvQkFBQyxHQUFHO0VBQUMsYUFBYSxFQUFDO0FBQVEsR0FFdkJRLEtBQUssQ0FDRkMsTUFBTSxDQUFDQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0gsT0FBTyxJQUFJLENBQUNHLENBQUMsQ0FBQ0gsT0FBTyxDQUFDSSxFQUFFLElBQ25DRCxDQUFDLENBQUNFLE9BQU8sQ0FBQ0MsSUFBSSxJQUFJSCxDQUFDLENBQUNFLE9BQU8sQ0FBQ0UsSUFBSSxJQUNoQ0osQ0FBQyxDQUFDSyxNQUFNLENBQUNDLEtBQUssS0FBS04sQ0FBQyxDQUFDSyxNQUFNLENBQUNFLElBQUksQ0FBQyxDQUNwQ0MsSUFBSSxDQUFDLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxLQUFLRCxDQUFDLENBQUNFLElBQUksQ0FBQ0MsYUFBYSxDQUFDRixDQUFDLENBQUNDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUNsREUsR0FBRyxDQUFDLENBQUNDLElBQUksRUFBRUMsQ0FBQyxrQkFBTSxvQkFBQyxJQUFJO0VBQUMsSUFBSSxFQUFFRCxJQUFLO0VBQUMsR0FBRyxFQUFFLEVBQUUsR0FBQ0M7QUFBRSxFQUFJLENBQUMsQ0FFcEQsQ0FDRixDQUFTIn0=