const React = require('react');
const {
  Box,
  Text
} = require('ink');
const prettyDiff = require('../../pretty-diff.js');
const prettySource = require('../../pretty-source.js');
const yaml = require('tap-yaml');
const importJSX = require('@isaacs/import-jsx');
const PassFail = importJSX('./pass-fail.js');
const AssertName = importJSX('./assert-name.js');
const Color = importJSX('../../color.js');
module.exports = ({
  res
}) => {
  const {
    ok,
    id,
    name,
    testName,
    skip,
    todo
  } = res;
  const diag = res.diag || {};
  const diff = prettyDiff(diag && diag.diff);
  if (diff) {
    delete diag.diff;
    delete diag.found;
    delete diag.wanted;
    delete diag.pattern;
    delete diag.compare;
  }
  const source = prettySource(diag);
  if (source) delete diag.source;

  // pretty-print errors found in t.error() assertions
  const origin = diag && diag.found && diag.origin;
  const originSrc = prettySource(origin);
  if (originSrc) {
    origin.message = diag.found.message;
    delete diag.origin;
    delete diag.found;
    delete origin.source;
  }
  delete diag.didNotWant;
  const filtered = /^filter: (only|\/.*\/)$/.test(res.skip);
  return filtered ? /*#__PURE__*/React.createElement(Text, null) : /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(PassFail, {
    ok: ok,
    name: testName,
    skip: skip,
    todo: todo
  }), /*#__PURE__*/React.createElement(AssertName, {
    ok,
    name,
    skip,
    todo
  }), /*#__PURE__*/React.createElement(Text, null, ' '), source ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, source)) : /*#__PURE__*/React.createElement(Text, null), diff ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, diff + '\n')) : /*#__PURE__*/React.createElement(Text, null), diag && Object.keys(diag).length ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, `  ${yaml.stringify({
    test: res.fullname,
    ...diag
  }).split('\n').join('\n  ')}`)) : /*#__PURE__*/React.createElement(Text, null), originSrc ? /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Box, {
    marginLeft: 2
  }, /*#__PURE__*/React.createElement(Text, null, "Error Origin:", '\n')), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, originSrc)), /*#__PURE__*/React.createElement(Box, {
    marginLeft: 2
  }, /*#__PURE__*/React.createElement(Text, null, yaml.stringify(origin)))) : /*#__PURE__*/React.createElement(Text, null));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwicHJldHR5RGlmZiIsInByZXR0eVNvdXJjZSIsInlhbWwiLCJpbXBvcnRKU1giLCJQYXNzRmFpbCIsIkFzc2VydE5hbWUiLCJDb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXMiLCJvayIsImlkIiwibmFtZSIsInRlc3ROYW1lIiwic2tpcCIsInRvZG8iLCJkaWFnIiwiZGlmZiIsImZvdW5kIiwid2FudGVkIiwicGF0dGVybiIsImNvbXBhcmUiLCJzb3VyY2UiLCJvcmlnaW4iLCJvcmlnaW5TcmMiLCJtZXNzYWdlIiwiZGlkTm90V2FudCIsImZpbHRlcmVkIiwidGVzdCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJzdHJpbmdpZnkiLCJmdWxsbmFtZSIsInNwbGl0Iiwiam9pbiJdLCJzb3VyY2VzIjpbInRlc3QtcG9pbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5jb25zdCB7Qm94LCBUZXh0fSA9IHJlcXVpcmUoJ2luaycpXG5jb25zdCBwcmV0dHlEaWZmID0gcmVxdWlyZSgnLi4vLi4vcHJldHR5LWRpZmYuanMnKVxuY29uc3QgcHJldHR5U291cmNlID0gcmVxdWlyZSgnLi4vLi4vcHJldHR5LXNvdXJjZS5qcycpXG5jb25zdCB5YW1sID0gcmVxdWlyZSgndGFwLXlhbWwnKVxuY29uc3QgaW1wb3J0SlNYID0gcmVxdWlyZSgnQGlzYWFjcy9pbXBvcnQtanN4JylcbmNvbnN0IFBhc3NGYWlsID0gaW1wb3J0SlNYKCcuL3Bhc3MtZmFpbC5qcycpXG5jb25zdCBBc3NlcnROYW1lID0gaW1wb3J0SlNYKCcuL2Fzc2VydC1uYW1lLmpzJylcbmNvbnN0IENvbG9yID0gaW1wb3J0SlNYKCcuLi8uLi9jb2xvci5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gKHtyZXN9KSA9PiB7XG4gIGNvbnN0IHtvaywgaWQsIG5hbWUsIHRlc3ROYW1lLCBza2lwLCB0b2RvfSA9IHJlc1xuICBjb25zdCBkaWFnID0gcmVzLmRpYWcgfHwge31cbiAgY29uc3QgZGlmZiA9IHByZXR0eURpZmYoZGlhZyAmJiBkaWFnLmRpZmYpXG4gIGlmIChkaWZmKSB7XG4gICAgZGVsZXRlIGRpYWcuZGlmZlxuICAgIGRlbGV0ZSBkaWFnLmZvdW5kXG4gICAgZGVsZXRlIGRpYWcud2FudGVkXG4gICAgZGVsZXRlIGRpYWcucGF0dGVyblxuICAgIGRlbGV0ZSBkaWFnLmNvbXBhcmVcbiAgfVxuICBjb25zdCBzb3VyY2UgPSBwcmV0dHlTb3VyY2UoZGlhZylcbiAgaWYgKHNvdXJjZSlcbiAgICBkZWxldGUgZGlhZy5zb3VyY2VcblxuICAvLyBwcmV0dHktcHJpbnQgZXJyb3JzIGZvdW5kIGluIHQuZXJyb3IoKSBhc3NlcnRpb25zXG4gIGNvbnN0IG9yaWdpbiA9IGRpYWcgJiYgZGlhZy5mb3VuZCAmJiBkaWFnLm9yaWdpblxuICBjb25zdCBvcmlnaW5TcmMgPSBwcmV0dHlTb3VyY2Uob3JpZ2luKVxuICBpZiAob3JpZ2luU3JjKSB7XG4gICAgb3JpZ2luLm1lc3NhZ2UgPSBkaWFnLmZvdW5kLm1lc3NhZ2VcbiAgICBkZWxldGUgZGlhZy5vcmlnaW5cbiAgICBkZWxldGUgZGlhZy5mb3VuZFxuICAgIGRlbGV0ZSBvcmlnaW4uc291cmNlXG4gIH1cblxuICBkZWxldGUgZGlhZy5kaWROb3RXYW50XG5cbiAgY29uc3QgZmlsdGVyZWQgPSAvXmZpbHRlcjogKG9ubHl8XFwvLipcXC8pJC8udGVzdChyZXMuc2tpcClcblxuICByZXR1cm4gZmlsdGVyZWQgPyA8VGV4dD48L1RleHQ+IDogKFxuICAgIDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgPFBhc3NGYWlsIG9rPXtva30gbmFtZT17dGVzdE5hbWV9IHNraXA9e3NraXB9IHRvZG89e3RvZG99IC8+XG4gICAgICA8QXNzZXJ0TmFtZSB7Li4ue29rLCBuYW1lLCBza2lwLCB0b2RvfX0gLz5cbiAgICAgIDxUZXh0PnsnICd9PC9UZXh0PlxuICAgICAgeyBzb3VyY2UgPyAoPEJveD48VGV4dD57c291cmNlfTwvVGV4dD48L0JveD4pIDogPFRleHQ+PC9UZXh0PiB9XG4gICAgICB7IGRpZmYgPyAoPEJveD48VGV4dD57IGRpZmYgKyAnXFxuJ308L1RleHQ+PC9Cb3g+KSA6IDxUZXh0PjwvVGV4dD4gfVxuICAgICAgeyBkaWFnICYmIE9iamVjdC5rZXlzKGRpYWcpLmxlbmd0aCA/IChcbiAgICAgICAgPEJveD48VGV4dD5cbiAgICAgICAgICB7YCAgJHtcbiAgICAgICAgICAgIHlhbWwuc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgdGVzdDogcmVzLmZ1bGxuYW1lLFxuICAgICAgICAgICAgICAuLi5kaWFnLFxuICAgICAgICAgICAgfSkuc3BsaXQoJ1xcbicpLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICB9YH1cbiAgICAgICAgPC9UZXh0PjwvQm94PlxuICAgICAgKSA6IDxUZXh0PjwvVGV4dD4gfVxuICAgICAgeyBvcmlnaW5TcmMgPyAoXG4gICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgICAgIDxCb3ggbWFyZ2luTGVmdD17Mn0+PFRleHQ+RXJyb3IgT3JpZ2luOnsnXFxuJ308L1RleHQ+PC9Cb3g+XG4gICAgICAgICAgPEJveD48VGV4dD57b3JpZ2luU3JjfTwvVGV4dD48L0JveD5cbiAgICAgICAgICA8Qm94IG1hcmdpbkxlZnQ9ezJ9PjxUZXh0Pnt5YW1sLnN0cmluZ2lmeShvcmlnaW4pfTwvVGV4dD48L0JveD5cbiAgICAgICAgPC9Cb3g+XG4gICAgICApIDogPFRleHQ+PC9UZXh0PiB9XG4gICAgPC9Cb3g+XG4gIClcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBQ0MsR0FBRztFQUFFQztBQUFJLENBQUMsR0FBR0YsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNsQyxNQUFNRyxVQUFVLEdB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