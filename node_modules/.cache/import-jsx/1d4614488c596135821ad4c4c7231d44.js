// bringing back the Color tag removed in ink 3.0
const c = require('chalk');
const React = require('react');
const {
  memo
} = React;
const {
  Transform
} = require('ink');
const arrify = obj => Array.isArray(obj) ? obj : obj === '' || obj === null || obj === undefined ? [] : [obj];
const methods = ['hex', 'hsl', 'hsv', 'hwb', 'rgb', 'keyword', 'bgHex', 'bgHsl', 'bgHsv', 'bgHwb', 'bgRgb', 'bgKeyword', 'ansi', 'ansi256', 'bgAnsi', 'bgAnsi256'];
const Color = ({
  children,
  ...colorProps
}) => {
  if (children === '') return null;
  const transform = children => {
    for (const [method, value] of Object.entries(colorProps)) {
      if (methods.includes(method)) children = c[method](...arrify(value))(children);else if (typeof c[method] === 'function') children = c[method](children);
    }
    return children;
  };
  return /*#__PURE__*/React.createElement(Transform, {
    transform: transform
  }, children);
};
Color.displayName = 'Color';
Color.defaultProps = {
  children: ''
};
module.exports = memo(Color);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjIiwicmVxdWlyZSIsIlJlYWN0IiwibWVtbyIsIlRyYW5zZm9ybSIsImFycmlmeSIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsIm1ldGhvZHMiLCJDb2xvciIsImNoaWxkcmVuIiwiY29sb3JQcm9wcyIsInRyYW5zZm9ybSIsIm1ldGhvZCIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImluY2x1ZGVzIiwiZGlzcGxheU5hbWUiLCJkZWZhdWx0UHJvcHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiY29sb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYnJpbmdpbmcgYmFjayB0aGUgQ29sb3IgdGFnIHJlbW92ZWQgaW4gaW5rIDMuMFxuY29uc3QgYyA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuY29uc3Qge21lbW99ID0gUmVhY3RcbmNvbnN0IHtUcmFuc2Zvcm19ID0gcmVxdWlyZSgnaW5rJylcbmNvbnN0IGFycmlmeSA9IG9iaiA9PiBBcnJheS5pc0FycmF5KG9iaikgPyBvYmpcbiAgOiBvYmogPT09ICcnIHx8IG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCA/IFtdXG4gIDogW29ial1cblxuY29uc3QgbWV0aG9kcyA9IFtcbiAgJ2hleCcsXG4gICdoc2wnLFxuICAnaHN2JyxcbiAgJ2h3YicsXG4gICdyZ2InLFxuICAna2V5d29yZCcsXG4gICdiZ0hleCcsXG4gICdiZ0hzbCcsXG4gICdiZ0hzdicsXG4gICdiZ0h3YicsXG4gICdiZ1JnYicsXG4gICdiZ0tleXdvcmQnLFxuICAnYW5zaScsXG4gICdhbnNpMjU2JyxcbiAgJ2JnQW5zaScsXG4gICdiZ0Fuc2kyNTYnLFxuXVxuXG5jb25zdCBDb2xvciA9ICh7Y2hpbGRyZW4sIC4uLmNvbG9yUHJvcHN9KSA9PiB7XG4gIGlmIChjaGlsZHJlbiA9PT0gJycpXG4gICAgcmV0dXJuIG51bGxcblxuICBjb25zdCB0cmFuc2Zvcm0gPSBjaGlsZHJlbiA9PiB7XG4gICAgZm9yIChjb25zdCBbbWV0aG9kLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29sb3JQcm9wcykpIHtcbiAgICAgIGlmIChtZXRob2RzLmluY2x1ZGVzKG1ldGhvZCkpXG4gICAgICAgIGNoaWxkcmVuID0gY1ttZXRob2RdKC4uLmFycmlmeSh2YWx1ZSkpKGNoaWxkcmVuKVxuICAgICAgZWxzZSBpZiAodHlwZW9mIGNbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgY2hpbGRyZW4gPSBjW21ldGhvZF0oY2hpbGRyZW4pXG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlblxuICB9XG5cbiAgcmV0dXJuICg8VHJhbnNmb3JtIHRyYW5zZm9ybT17dHJhbnNmb3JtfT57Y2hpbGRyZW59PC9UcmFuc2Zvcm0+KVxufVxuQ29sb3IuZGlzcGxheU5hbWUgPSAnQ29sb3InXG5cbkNvbG9yLmRlZmF1bHRQcm9wcyA9IHsgY2hpbGRyZW46ICcnIH1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vKENvbG9yKVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUMxQixNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFDRTtBQUFJLENBQUMsR0FBR0QsS0FBSztBQUNwQixNQUFNO0VBQUNFO0FBQVMsQ0FBQyxHQUFHSCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ2xDLE1BQU1JLE1BQU0sR0FBR0MsR0FBRyxJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsR0FBRyxDQUFDLEdBQUdBLEdBQUcsR0FDMUNBLEdBQUcsS0FBSyxFQUFFLElBQUlBLEdBQUcsS0FBSyxJQUFJLElBQUlBLEdBQUcsS0FBS0csU0FBUyxHQUFHLEVBQUUsR0FDcEQsQ0FBQ0gsR0FBRyxDQUFDO0FBRVQsTUFBTUksT0FBTyxHQUFHLENBQ2QsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxTQUFTLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFDUCxPQUFPLEVBQ1AsT0FBTyxFQUNQLE9BQU8sRUFDUCxXQUFXLEVBQ1gsTUFBTSxFQUNOLFNBQVMsRUFDVCxRQUFRLEVBQ1IsV0FBVyxDQUNaO0FBRUQsTUFBTUMsS0FBSyxHQUFHLENBQUM7RUFBQ0MsUUFBUTtFQUFFLEdBQUdDO0FBQVUsQ0FBQyxLQUFLO0VBQzNDLElBQUlELFFBQVEsS0FBSyxFQUFFLEVBQ2pCLE9BQU8sSUFBSTtFQUViLE1BQU1FLFNBQVMsR0FBR0YsUUFBUSxJQUFJO0lBQzVCLEtBQUssTUFBTSxDQUFDRyxNQUFNLEVBQUVDLEtBQUssQ0FBQyxJQUFJQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0wsVUFBVSxDQUFDLEVBQUU7TUFDeEQsSUFBSUgsT0FBTyxDQUFDUyxRQUFRLENBQUNKLE1BQU0sQ0FBQyxFQUMxQkgsUUFBUSxHQUFHWixDQUFDLENBQUNlLE1BQU0sQ0FBQyxDQUFDLEdBQUdWLE1BQU0sQ0FBQ1csS0FBSyxDQUFDLENBQUMsQ0FBQ0osUUFBUSxDQUFDLE1BQzdDLElBQUksT0FBT1osQ0FBQyxDQUFDZSxNQUFNLENBQUMsS0FBSyxVQUFVLEVBQ3RDSCxRQUFRLEdBQUdaLENBQUMsQ0FBQ2UsTUFBTSxDQUFDLENBQUNILFFBQVEsQ0FBQztJQUNsQztJQUNBLE9BQU9BLFFBQVE7RUFDakIsQ0FBQztFQUVELG9CQUFRLG9CQUFDLFNBQVM7SUFBQyxTQUFTLEVBQUVFO0VBQVUsR0FBRUYsUUFBUSxDQUFhO0FBQ2pFLENBQUM7QUFDREQsS0FBSyxDQUFDUyxXQUFXLEdBQUcsT0FBTztBQUUzQlQsS0FBSyxDQUFDVSxZQUFZLEdBQUc7RUFBRVQsUUFBUSxFQUFFO0FBQUcsQ0FBQztBQUVyQ1UsTUFBTSxDQUFDQyxPQUFPLEdBQUdwQixJQUFJLENBQUNRLEtBQUssQ0FBQyJ9