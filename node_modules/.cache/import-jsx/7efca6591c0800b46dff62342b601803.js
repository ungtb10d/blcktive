const React = require('react');
const {
  Box,
  Text
} = require('ink');
const importJSX = require('@isaacs/import-jsx');
const Color = importJSX('../../color.js');
const Reset = importJSX('../../reset.js');
const pending = () => /*#__PURE__*/React.createElement(Color, {
  hex: "#000",
  bgYellow: true,
  bold: true
}, /*#__PURE__*/React.createElement(Text, null, ' RUNS '));
const fail = () => /*#__PURE__*/React.createElement(Color, {
  hex: "#fff",
  bgRed: true,
  bold: true
}, /*#__PURE__*/React.createElement(Text, null, ' FAIL '));
const skip = () => /*#__PURE__*/React.createElement(Color, {
  bgBlue: true,
  rgb: [255, 255, 255],
  bold: true
}, /*#__PURE__*/React.createElement(Text, null, ' SKIP '));
const todo = () => /*#__PURE__*/React.createElement(Color, {
  bold: true,
  bgRgb: [127, 0, 127],
  rgb: [255, 255, 255]
}, /*#__PURE__*/React.createElement(Text, null, ' TODO '));
const pass = () => /*#__PURE__*/React.createElement(Color, {
  bgGreen: true,
  rgb: [0, 0, 0],
  bold: true
}, /*#__PURE__*/React.createElement(Text, null, ' PASS '));
module.exports = ({
  test,
  res
}) => /*#__PURE__*/React.createElement(Reset, null, test ? !test.results ? pending() : !test.results.ok ? fail() : test.options.skip || test.counts.skip > test.counts.todo ? skip() : test.options.todo || test.counts.todo ? todo() : pass() : res ? res.skip ? skip() : res.todo ? todo() : !res.ok ? fail() : pass() : /*#__PURE__*/React.createElement(Text, null));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwiaW1wb3J0SlNYIiwiQ29sb3IiLCJSZXNldCIsInBlbmRpbmciLCJmYWlsIiwic2tpcCIsInRvZG8iLCJwYXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInRlc3QiLCJyZXMiLCJyZXN1bHRzIiwib2siLCJvcHRpb25zIiwiY291bnRzIl0sInNvdXJjZXMiOlsic3RhdHVzLW1hcmsuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5jb25zdCB7Qm94LCBUZXh0fSA9IHJlcXVpcmUoJ2luaycpXG5jb25zdCBpbXBvcnRKU1ggPSByZXF1aXJlKCdAaXNhYWNzL2ltcG9ydC1qc3gnKVxuY29uc3QgQ29sb3IgPSBpbXBvcnRKU1goJy4uLy4uL2NvbG9yLmpzJylcbmNvbnN0IFJlc2V0ID0gaW1wb3J0SlNYKCcuLi8uLi9yZXNldC5qcycpXG5cbmNvbnN0IHBlbmRpbmcgPSAoKSA9PiAoPENvbG9yIGhleD0nIzAwMCcgYmdZZWxsb3cgYm9sZD48VGV4dD57JyBSVU5TICd9PC9UZXh0PjwvQ29sb3I+KVxuY29uc3QgZmFpbCA9ICgpID0+ICg8Q29sb3IgaGV4PScjZmZmJyBiZ1JlZCBib2xkPjxUZXh0PnsnIEZBSUwgJ308L1RleHQ+PC9Db2xvcj4pXG5jb25zdCBza2lwID0gKCkgPT4gKDxDb2xvciBiZ0JsdWUgcmdiPXtbMjU1LDI1NSwyNTVdfSBib2xkPjxUZXh0PnsnIFNLSVAgJ308L1RleHQ+PC9Db2xvcj4pXG5jb25zdCB0b2RvID0gKCkgPT4gKDxDb2xvciBib2xkIGJnUmdiPXtbMTI3LDAsMTI3XX0gcmdiPXtbMjU1LDI1NSwyNTVdfT48VGV4dD57JyBUT0RPICd9PC9UZXh0PjwvQ29sb3I+KVxuY29uc3QgcGFzcyA9ICgpID0+ICg8Q29sb3IgYmdHcmVlbiByZ2I9e1swLDAsMF19IGJvbGQ+PFRleHQ+eycgUEFTUyAnfTwvVGV4dD48L0NvbG9yPilcblxubW9kdWxlLmV4cG9ydHMgPSAoe3Rlc3QsIHJlc30pID0+IDxSZXNldD57XG4gIHRlc3QgPyAoXG4gICAgIXRlc3QucmVzdWx0cyA/IHBlbmRpbmcoKVxuICAgIDogIXRlc3QucmVzdWx0cy5vayA/IGZhaWwoKVxuICAgIDogdGVzdC5vcHRpb25zLnNraXAgfHwgdGVzdC5jb3VudHMuc2tpcCA+IHRlc3QuY291bnRzLnRvZG8gPyBza2lwKClcbiAgICA6IHRlc3Qub3B0aW9ucy50b2RvIHx8IHRlc3QuY291bnRzLnRvZG8gPyB0b2RvKClcbiAgICA6IHBhc3MoKVxuICApIDogcmVzID8gKFxuICAgIHJlcy5za2lwID8gc2tpcCgpXG4gICAgOiByZXMudG9kbyA/IHRvZG8oKVxuICAgIDogIXJlcy5vayA/IGZhaWwoKVxuICAgIDogcGFzcygpXG4gICkgOiA8VGV4dD48L1RleHQ+XG59PC9SZXNldD5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBQ0MsR0FBRztFQUFFQztBQUFJLENBQUMsR0FBR0YsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNsQyxNQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUMvQyxNQUFNSSxLQUFLLEdBQUdELFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztBQUN6QyxNQUFNRSxLQUFLLEdBQUdGLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztBQUV6QyxNQUFNRyxPQUFPLEdBQUcsbUJBQU8sb0JBQUMsS0FBSztFQUFDLEdBQUcsRUFBQyxNQUFNO0VBQUMsUUFBUTtFQUFDLElBQUk7QUFBQSxnQkFBQyxvQkFBQyxJQUFJLFFBQUUsUUFBUSxDQUFRLENBQVM7QUFDdkYsTUFBTUMsSUFBSSxHQUFHLG1CQUFPLG9CQUFDLEtBQUs7RUFBQyxHQUFHLEVBQUMsTUFBTTtFQUFDLEtBQUs7RUFBQyxJQUFJO0FBQUEsZ0JBQUMsb0JBQUMsSUFBSSxRQUFFLFFBQVEsQ0FBUSxDQUFTO0FBQ2pGLE1BQU1DLElBQUksR0FBRyxtQkFBTyxvQkFBQyxLQUFLO0VBQUMsTUFBTTtFQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxDQUFFO0VBQUMsSUFBSTtBQUFBLGdCQUFDLG9CQUFDLElBQUksUUFBRSxRQUFRLENBQVEsQ0FBUztBQUMzRixNQUFNQyxJQUFJLEdBQUcsbUJBQU8sb0JBQUMsS0FBSztFQUFDLElBQUk7RUFBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBRTtFQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRztBQUFFLGdCQUFDLG9CQUFDLElBQUksUUFBRSxRQUFRLENBQVEsQ0FBUztBQUN4RyxNQUFNQyxJQUFJLEdBQUcsbUJBQU8sb0JBQUMsS0FBSztFQUFDLE9BQU87RUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBRTtFQUFDLElBQUk7QUFBQSxnQkFBQyxvQkFBQyxJQUFJLFFBQUUsUUFBUSxDQUFRLENBQVM7QUFFdEZDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUM7RUFBQ0MsSUFBSTtFQUFFQztBQUFHLENBQUMsa0JBQUssb0JBQUMsS0FBSyxRQUN0Q0QsSUFBSSxHQUNGLENBQUNBLElBQUksQ0FBQ0UsT0FBTyxHQUFHVCxPQUFPLEVBQUUsR0FDdkIsQ0FBQ08sSUFBSSxDQUFDRSxPQUFPLENBQUNDLEVBQUUsR0FBR1QsSUFBSSxFQUFFLEdBQ3pCTSxJQUFJLENBQUNJLE9BQU8sQ0FBQ1QsSUFBSSxJQUFJSyxJQUFJLENBQUNLLE1BQU0sQ0FBQ1YsSUFBSSxHQUFHSyxJQUFJLENBQUNLLE1BQU0sQ0FBQ1QsSUFBSSxHQUFHRCxJQUFJLEVBQUUsR0FDakVLLElBQUksQ0FBQ0ksT0FBTyxDQUFDUixJQUFJLElBQUlJLElBQUksQ0FBQ0ssTUFBTSxDQUFDVCxJQUFJLEdBQUdBLElBQUksRUFBRSxHQUM5Q0MsSUFBSSxFQUFFLEdBQ05JLEdBQUcsR0FDTEEsR0FBRyxDQUFDTixJQUFJLEdBQUdBLElBQUksRUFBRSxHQUNmTSxHQUFHLENBQUNMLElBQUksR0FBR0EsSUFBSSxFQUFFLEdBQ2pCLENBQUNLLEdBQUcsQ0FBQ0UsRUFBRSxHQUFHVCxJQUFJLEVBQUUsR0FDaEJHLElBQUksRUFBRSxnQkFDTixvQkFBQyxJQUFJLE9BQVEsQ0FDViJ9