const React = require('react');
const {
  Box,
  Text
} = require('ink');
const importJSX = require('@isaacs/import-jsx');
const Color = importJSX('../../color.js');
const glyphColor = ({
  ok,
  skip,
  todo
}) => ({
  [skip ? 'cyan' : todo ? 'magenta' : !ok ? 'red' : 'green']: true
});
const glyphText = ({
  ok,
  skip,
  todo
}) => skip ? ' ~ ' : todo ? ' ☐ ' : !ok ? ' ✖ ' : ' ✓ ';
const Glyph = ({
  ok,
  skip,
  todo
}) => /*#__PURE__*/React.createElement(Box, {
  width: 3
}, /*#__PURE__*/React.createElement(Color, Object.assign({
  bold: true
}, glyphColor({
  ok,
  skip,
  todo
})), /*#__PURE__*/React.createElement(Text, null, glyphText({
  ok,
  skip,
  todo
}))));
const Reason = ({
  skip,
  todo
}) => skip && skip !== true ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, ' > '), /*#__PURE__*/React.createElement(Color, glyphColor({
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, skip))) : todo && todo !== true ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, ' > '), /*#__PURE__*/React.createElement(Color, glyphColor({
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, todo))) : /*#__PURE__*/React.createElement(Text, null);
const AssertName = ({
  ok,
  name,
  skip,
  todo
}) => /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Glyph, {
  ok,
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, name || '(unnamed test)'), /*#__PURE__*/React.createElement(Reason, {
  skip,
  todo
}));
module.exports = AssertName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwiaW1wb3J0SlNYIiwiQ29sb3IiLCJnbHlwaENvbG9yIiwib2siLCJza2lwIiwidG9kbyIsImdseXBoVGV4dCIsIkdseXBoIiwiUmVhc29uIiwiQXNzZXJ0TmFtZSIsIm5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiYXNzZXJ0LW5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5jb25zdCB7Qm94LCBUZXh0fSA9IHJlcXVpcmUoJ2luaycpXG5jb25zdCBpbXBvcnRKU1ggPSByZXF1aXJlKCdAaXNhYWNzL2ltcG9ydC1qc3gnKVxuY29uc3QgQ29sb3IgPSBpbXBvcnRKU1goJy4uLy4uL2NvbG9yLmpzJylcblxuY29uc3QgZ2x5cGhDb2xvciA9ICh7IG9rLCBza2lwLCB0b2RvIH0pID0+ICh7XG4gIFsgc2tpcCA/ICdjeWFuJ1xuICA6IHRvZG8gPyAnbWFnZW50YSdcbiAgOiAhb2sgPyAncmVkJ1xuICA6ICdncmVlbiddOiB0cnVlLFxufSlcblxuY29uc3QgZ2x5cGhUZXh0ID0gKHsgb2ssIHNraXAsIHRvZG8gfSkgPT5cbiAgc2tpcCA/ICcgfiAnXG4gIDogdG9kbyA/ICcg4piQICdcbiAgOiAhb2sgPyAnIOKcliAnXG4gIDogJyDinJMgJ1xuXG5jb25zdCBHbHlwaCA9ICh7IG9rLCBza2lwLCB0b2RvIH0pID0+IChcbiAgPEJveCB3aWR0aD17M30+XG4gICAgPENvbG9yIGJvbGQgey4uLmdseXBoQ29sb3Ioe29rLCBza2lwLCB0b2RvfSl9PlxuICAgICAgPFRleHQ+e2dseXBoVGV4dCh7b2ssIHNraXAsIHRvZG99KX08L1RleHQ+XG4gICAgPC9Db2xvcj5cbiAgPC9Cb3g+XG4pXG5cbmNvbnN0IFJlYXNvbiA9ICh7c2tpcCwgdG9kb30pID0+XG4gIHNraXAgJiYgc2tpcCAhPT0gdHJ1ZSA/IChcbiAgICA8Qm94PlxuICAgICAgPFRleHQ+eycgPiAnfTwvVGV4dD5cbiAgICAgIDxDb2xvciB7Li4uZ2x5cGhDb2xvcih7c2tpcCwgdG9kb30pfT48VGV4dD57c2tpcH08L1RleHQ+PC9Db2xvcj5cbiAgICA8L0JveD5cbiAgKVxuICA6IHRvZG8gJiYgdG9kbyAhPT0gdHJ1ZSA/IChcbiAgICA8Qm94PlxuICAgICAgPFRleHQ+eycgPiAnfTwvVGV4dD5cbiAgICAgIDxDb2xvciB7Li4uZ2x5cGhDb2xvcih7c2tpcCwgdG9kb30pfT48VGV4dD57dG9kb308L1RleHQ+PC9Db2xvcj5cbiAgICA8L0JveD5cbiAgKVxuICA6IDxUZXh0PjwvVGV4dD5cblxuY29uc3QgQXNzZXJ0TmFtZSA9ICh7IG9rLCBuYW1lLCBza2lwLCB0b2RvIH0pID0+IChcbiAgPEJveD5cbiAgICA8R2x5cGggey4uLntvaywgc2tpcCwgdG9kb319IC8+XG4gICAgPFRleHQ+e25hbWUgfHwgJyh1bm5hbWVkIHRlc3QpJ308L1RleHQ+XG4gICAgPFJlYXNvbiB7Li4ue3NraXAsIHRvZG99fSAvPlxuICA8L0JveD5cbilcblxubW9kdWxlLmV4cG9ydHMgPSBBc3NlcnROYW1lXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUNDLEdBQUc7RUFBRUM7QUFBSSxDQUFDLEdBQUdGLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDbEMsTUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDL0MsTUFBTUksS0FBSyxHQUFHRCxTQUFTLENBQUMsZ0JBQWdCLENBQUM7QUFFekMsTUFBTUUsVUFBVSxHQUFHLENBQUM7RUFBRUMsRUFBRTtFQUFFQyxJQUFJO0VBQUVDO0FBQUssQ0FBQyxNQUFNO0VBQzFDLENBQUVELElBQUksR0FBRyxNQUFNLEdBQ2JDLElBQUksR0FBRyxTQUFTLEdBQ2hCLENBQUNGLEVBQUUsR0FBRyxLQUFLLEdBQ1gsT0FBTyxHQUFHO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsTUFBTUcsU0FBUyxHQUFHLENBQUM7RUFBRUgsRUFBRTtFQUFFQyxJQUFJO0VBQUVDO0FBQUssQ0FBQyxLQUNuQ0QsSUFBSSxHQUFHLEtBQUssR0FDVkMsSUFBSSxHQUFHLEtBQUssR0FDWixDQUFDRixFQUFFLEdBQUcsS0FBSyxHQUNYLEtBQUs7QUFFVCxNQUFNSSxLQUFLLEdBQUcsQ0FBQztFQUFFSixFQUFFO0VBQUVDLElBQUk7RUFBRUM7QUFBSyxDQUFDLGtCQUMvQixvQkFBQyxHQUFHO0VBQUMsS0FBSyxFQUFFO0FBQUUsZ0JBQ1osb0JBQUMsS0FBSztFQUFDLElBQUk7QUFBQSxHQUFLSCxVQUFVLENBQUM7RUFBQ0MsRUFBRTtFQUFFQyxJQUFJO0VBQUVDO0FBQUksQ0FBQyxDQUFDLGdCQUMxQyxvQkFBQyxJQUFJLFFBQUVDLFNBQVMsQ0FBQztFQUFDSCxFQUFFO0VBQUVDLElBQUk7RUFBRUM7QUFBSSxDQUFDLENBQUMsQ0FBUSxDQUNwQyxDQUVYO0FBRUQsTUFBTUcsTUFBTSxHQUFHLENBQUM7RUFBQ0osSUFBSTtFQUFFQztBQUFJLENBQUMsS0FDMUJELElBQUksSUFBSUEsSUFBSSxLQUFLLElBQUksZ0JBQ25CLG9CQUFDLEdBQUcscUJBQ0Ysb0JBQUMsSUFBSSxRQUFFLEtBQUssQ0FBUSxlQUNwQixvQkFBQyxLQUFLLEVBQUtGLFVBQVUsQ0FBQztFQUFDRSxJQUFJO0VBQUVDO0FBQUksQ0FBQyxDQUFDLGVBQUUsb0JBQUMsSUFBSSxRQUFFRCxJQUFJLENBQVEsQ0FBUSxDQUM1RCxHQUVOQyxJQUFJLElBQUlBLElBQUksS0FBSyxJQUFJLGdCQUNyQixvQkFBQyxHQUFHLHFCQUNGLG9CQUFDLElBQUksUUFBRSxLQUFLLENBQVEsZUFDcEIsb0JBQUMsS0FBSyxFQUFLSCxVQUFVLENBQUM7RUFBQ0UsSUFBSTtFQUFFQztBQUFJLENBQUMsQ0FBQyxlQUFFLG9CQUFDLElBQUksUUFBRUEsSUFBSSxDQUFRLENBQVEsQ0FDNUQsZ0JBRU4sb0JBQUMsSUFBSSxPQUFRO0FBRWpCLE1BQU1JLFVBQVUsR0FBRyxDQUFDO0VBQUVOLEVBQUU7RUFBRU8sSUFBSTtFQUFFTixJQUFJO0VBQUVDO0FBQUssQ0FBQyxrQkFDMUMsb0JBQUMsR0FBRyxxQkFDRixvQkFBQyxLQUFLO0VBQU1GLEVBQUU7RUFBRUMsSUFBSTtFQUFFQztBQUFJLEVBQUssZUFDL0Isb0JBQUMsSUFBSSxRQUFFSyxJQUFJLElBQUksZ0JBQWdCLENBQVEsZUFDdkMsb0JBQUMsTUFBTTtFQUFNTixJQUFJO0VBQUVDO0FBQUksRUFBSyxDQUUvQjtBQUVETSxNQUFNLENBQUNDLE9BQU8sR0FBR0gsVUFBVSJ9